-- Script: 001_create_rh_tables.sql (PostgreSQL)
-- Objetivo: criar os objetos principais do schema RH na base PostgreSQL.

CREATE SCHEMA IF NOT EXISTS "RH";

-- Tabela de usuários
CREATE TABLE IF NOT EXISTS "RH"."Tbl_Usuarios" (
    "id_Usuario"            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "nome_Completo"         VARCHAR(200),
    "email"                 VARCHAR(200),
    -- senha: recomendamos armazenar hash em produção.
    "senha"                 VARCHAR(200),
    "b_senha_Temporaria"    BOOLEAN NOT NULL DEFAULT FALSE,
    "senha_Tentativas"      INTEGER NOT NULL DEFAULT 0,
    "dat_senha_Bloqueado_em" TIMESTAMP(3),
    "locatario_id"          INTEGER NOT NULL,
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "atualizado_Usuario_id" INTEGER,
    "dat_atualizado_em"     TIMESTAMP(3),
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3)
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_tbl_usuarios_email_ativo
    ON "RH"."Tbl_Usuarios" ("email")
    WHERE "dat_cancelamento_em" IS NULL;

-- Tabelas mestres
CREATE TABLE IF NOT EXISTS "RH"."Tbl_Categorias" (
    "id_Categoria"          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "nome_Categoria"        VARCHAR(200) NOT NULL,
    "descricao_Categoria"   VARCHAR(1000),
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "atualizado_Usuario_id" INTEGER,
    "dat_atualizado_em"     TIMESTAMP(3),
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3)
);

CREATE TABLE IF NOT EXISTS "RH"."Tbl_Grupos" (
    "id_Grupo"              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "nome_Grupo"            VARCHAR(200) NOT NULL,
    "descricao_Grupo"       VARCHAR(1000),
    "categoria_id"          INTEGER,
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "atualizado_Usuario_id" INTEGER,
    "dat_atualizado_em"     TIMESTAMP(3),
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3),
    CONSTRAINT fk_tbl_grupos_categorias FOREIGN KEY ("categoria_id") REFERENCES "RH"."Tbl_Categorias" ("id_Categoria")
);

CREATE TABLE IF NOT EXISTS "RH"."Tbl_Permissoes" (
    "id_permissao"          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "cod_permissao"         VARCHAR(200) NOT NULL,
    "descricao_permissao"   VARCHAR(1000),
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "atualizado_Usuario_id" INTEGER,
    "dat_atualizado_em"     TIMESTAMP(3),
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3)
);

-- Tabelas relacionais (histórico) com surrogate PK
CREATE TABLE IF NOT EXISTS "RH"."Tbl_Rel_Grupos_Grupos" (
    "id_rel_grupo_grupo"    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "grupo_pai_id"          INTEGER NOT NULL,
    "grupo_filho_id"        INTEGER NOT NULL,
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3),
    CONSTRAINT fk_rel_grupos_grupos_pai FOREIGN KEY ("grupo_pai_id") REFERENCES "RH"."Tbl_Grupos" ("id_Grupo"),
    CONSTRAINT fk_rel_grupos_grupos_filho FOREIGN KEY ("grupo_filho_id") REFERENCES "RH"."Tbl_Grupos" ("id_Grupo"),
    CONSTRAINT ck_rel_grupos_pai_filho_dif CHECK ("grupo_pai_id" <> "grupo_filho_id")
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_rel_grupos_grupos_ativo
    ON "RH"."Tbl_Rel_Grupos_Grupos" ("grupo_pai_id", "grupo_filho_id")
    WHERE "dat_cancelamento_em" IS NULL;

CREATE TABLE IF NOT EXISTS "RH"."Tbl_Rel_Usuarios_Grupos" (
    "id_rel_usuario_grupo"  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "usuario_id"            INTEGER NOT NULL,
    "grupo_id"              INTEGER NOT NULL,
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3),
    CONSTRAINT fk_rel_usuario_grupos_grupo FOREIGN KEY ("grupo_id") REFERENCES "RH"."Tbl_Grupos" ("id_Grupo"),
    CONSTRAINT fk_rel_usuario_grupos_usuario FOREIGN KEY ("usuario_id") REFERENCES "RH"."Tbl_Usuarios" ("id_Usuario")
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_rel_usuarios_grupos_usuario_grupo_active
    ON "RH"."Tbl_Rel_Usuarios_Grupos" ("usuario_id", "grupo_id")
    WHERE "dat_cancelamento_em" IS NULL;

CREATE TABLE IF NOT EXISTS "RH"."Tbl_Rel_Usuarios_Permissoes" (
    "id_rel_usuario_permissao" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "usuario_id"            INTEGER NOT NULL,
    "permissao_id"          INTEGER NOT NULL,
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3),
    CONSTRAINT fk_rel_usuario_permissao_permissao FOREIGN KEY ("permissao_id") REFERENCES "RH"."Tbl_Permissoes" ("id_permissao"),
    CONSTRAINT fk_rel_usuario_permissao_usuario FOREIGN KEY ("usuario_id") REFERENCES "RH"."Tbl_Usuarios" ("id_Usuario")
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_rel_usuarios_permissoes_usuario_permissao_active
    ON "RH"."Tbl_Rel_Usuarios_Permissoes" ("usuario_id", "permissao_id")
    WHERE "dat_cancelamento_em" IS NULL;

CREATE TABLE IF NOT EXISTS "RH"."Tbl_Rel_Grupos_Permissoes" (
    "id_rel_grupo_permissao" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "grupo_id"              INTEGER NOT NULL,
    "permissao_id"          INTEGER NOT NULL,
    "criado_Usuario_id"     INTEGER NOT NULL DEFAULT 1,
    "dat_criado_em"         TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "cancelamento_Usuario_id" INTEGER,
    "dat_cancelamento_em"   TIMESTAMP(3),
    CONSTRAINT fk_rel_grupo_permissao_grupo FOREIGN KEY ("grupo_id") REFERENCES "RH"."Tbl_Grupos" ("id_Grupo"),
    CONSTRAINT fk_rel_grupo_permissao_permissao FOREIGN KEY ("permissao_id") REFERENCES "RH"."Tbl_Permissoes" ("id_permissao")
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_rel_grupos_permissoes_grupo_permissao_active
    ON "RH"."Tbl_Rel_Grupos_Permissoes" ("grupo_id", "permissao_id")
    WHERE "dat_cancelamento_em" IS NULL;

-- Função para obter permissões de um grupo em formato de texto
DROP FUNCTION IF EXISTS "RH"."Fn_GetPermissoesGrupoXML"(INTEGER);

CREATE OR REPLACE FUNCTION "RH"."Fn_GetPermissoesGrupoXML"(IN id_Grupo INTEGER)
RETURNS TEXT
AS $$
DECLARE
    permissoes_text TEXT;
BEGIN
    SELECT STRING_AGG(p."cod_permissao", ', ' ORDER BY p."cod_permissao")
    INTO permissoes_text
    FROM "RH"."Tbl_Permissoes" p
    INNER JOIN "RH"."Tbl_Rel_Grupos_Permissoes" rgp ON p."id_permissao" = rgp."permissao_id"
    WHERE rgp."grupo_id" = id_Grupo
      AND rgp."dat_cancelamento_em" IS NULL
      AND p."dat_cancelamento_em" IS NULL;

    RETURN COALESCE(permissoes_text, '');
END;
$$ LANGUAGE plpgsql;
